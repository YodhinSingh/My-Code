
package A3;

import java.util.ArrayList;

// Figure out top logn flyers in O(n) time for the heap ADT

public class Problem3<K extends Comparable<K>,V> {
	
	protected ArrayList<Entry<K,V>> heap = new ArrayList<>();

	static class Entry<K extends Comparable<K>,V> {
		private K key; 
        private V value; 
        
        Entry(K k, V v){
        	this.key = k;
        	this.value = v;
        }
        
        public K getKey() {
        	return key;
        }
        public V getValue() {
        	return value;
        }
        protected void setKey(K newKey) { 
        	newKey = key; 
        } 
        protected void setValue(V newValue) { 
        	newValue = value; 
        } 
	}
	
	protected int parent(int j) { 
		return ((j-1) / 2); 
	} 
	protected int left(int j) { 
		return (2*j + 1); 
	} 
	protected int right(int j) {
		return (2*j + 2); 
	}
	protected boolean hasLeft(int j) { 
		return (left(j) < heap.size()); 
	} 
	protected boolean hasRight(int j) { 
		return (right(j) < heap.size()); 
	} 
	
	protected int compareTo(Entry<K,V> first, Entry<K, V> second) {
		if (first.getKey().compareTo(second.getKey()) > 0) {
			return 1;
		}
		else if (first.getKey().compareTo(second.getKey()) < 0) {
			return -1;
		}
		else {
			return 0;
		}
	}
	
	 protected void swap(int i, int j) { 
		 Entry<K,V> temp = heap.get(i);
		 heap.set(i, heap.get(j)); 
		 heap.set(j, temp);
	 }
	 
	 protected void upheap(int j) {
		while (j > 0) {
			int p = parent(j); 
			if (compareTo(heap.get(j), heap.get(p)) <= 0) {
				 break; 
		 	}
			swap(j, p);
			j = p;
		}
	}
	 
	 protected void downheap(int j) {
		 while (hasLeft(j)) {
			 int leftIndex = left(j);
			 int smallChildIndex = leftIndex; 
			 if (hasRight(j)) {
				 int rightIndex = right(j);
				 if (compareTo(heap.get(leftIndex), heap.get(rightIndex)) < 0) {
					 smallChildIndex = rightIndex;
				 }
			 }
			 if (compareTo(heap.get(smallChildIndex), heap.get(j)) <= 0) {
				 break; 
			 }
			 swap(j, smallChildIndex);
			 j = smallChildIndex;
		 }
	}
	 
	public int size() {
		return heap.size();
	}
	
	public boolean isEmpty() {
		return heap.isEmpty();
	}
	
	public Entry<K,V> insert(K key, V value){
		Entry<K,V> latest = new Entry<>(key,value);
		heap.add(latest);
		upheap(heap.size()-1);
		return latest;
	}
	public Entry<K,V> insert(Entry<K,V> e){
		return insert(e.getKey(), e.getValue());
	}
	
	
	 public Entry<K,V> removeMax() {
		 if (heap.isEmpty()) {
			 return null;
		 }
		 Entry<K,V> answer = heap.get(0);
		 swap(0, heap.size() - 1);
		 heap.remove(heap.size() - 1);
		 downheap(0);
		 return answer;
	} 
	 
	
	 public void buildHeap(ArrayList<Entry<K,V>> A)  {
		heap = A;
		for(int  r = parent(heap.size()-1); r >= 0; r--) {
			downheap(r);
		}
	}
	 
	public void topLogN(ArrayList<Entry<K,V>> list){
		int max = 0;
		
		buildHeap(list);
		ArrayList<Entry<K,V>> logN = (ArrayList<Entry<K, V>>) heap.clone();
		heap = logN;
		if (!isEmpty()) {
			max = (int) (Math.log(heap.size())/Math.log(2));	
		}
		
		System.out.println("number of top Log(n) flyers / total flyers: \t" + max + " / " + heap.size());
		for (int i = 0; i < max; i++) {
			Entry<K, V> temp = removeMax();
			System.out.println("\t" + temp.value + ": " + temp.getKey());
		}
		heap = list;
	}
	
	 
	public static void main(String[] args) {

		final int LENGTH = 12;
		Problem3<Integer, String> p = new Problem3<>();
		ArrayList<Entry<Integer,String>> myList = new ArrayList<>();
		
		
		for (int i = 0; i < LENGTH; i++) {
			int number = (int) (i * 1000 * Math.random());
			String name = "name" + i;
			Entry<Integer,String> temp = new Entry<>(number, name);
			myList.add(temp);
			System.out.println(temp.getValue() + ": " + temp.getKey());
		}
		
		System.out.println("\n-----------------------\n");
		p.topLogN(myList);


	}

}
