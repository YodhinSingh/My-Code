
package A3;

import java.util.ArrayList;

// Dynamic Median Finder ADT that supports insert (log(n) time), getMedian (O(1) time), removeMedian (log(n) time)
// using 2 heaps only as instance variables
 
public class Problem4 <E extends Comparable<E>>{

    private ArrayList<E> maxHeap;
    private ArrayList<E> minHeap;
    
    public Problem4(int size) {
    	maxHeap = new ArrayList<E>(size);
        minHeap = new ArrayList<E>(size);
    }
    
    protected int parent(int j) { 
		return ((j-1) / 2); 
	} 
	protected int left(int j) { 
		return (2*j + 1); 
	} 
	protected int right(int j) {
		return (2*j + 2); 
	}
	protected boolean hasLeft(ArrayList<E> heap, int j) { 
		return (left(j) < heap.size()); 
	} 
	protected boolean hasRight(ArrayList<E> heap, int j) { 
		return (right(j) < heap.size()); 
	} 
	protected int compareTo(E first, E second) {
		if (first.compareTo(second) > 0) {
			return 1;
		}
		else if (first.compareTo(second) < 0) {
			return -1;
		}
		else {
			return 0;
		}
	}
	protected void swap(ArrayList<E> heap, int i, int j) { 
		 E temp = heap.get(i);
		 heap.set(i, heap.get(j)); 
		 heap.set(j, temp);
	}
	 
	 protected void upheapMax(int j) {
		while (j > 0) {
			int p = parent(j); 
			if (compareTo(maxHeap.get(j), maxHeap.get(p)) <= 0) {
				 break; 
		 	}
			swap(maxHeap, j, p);
			j = p;
		}
	}
	 
	 protected void downheapMax(int j) {
		 while (hasLeft(maxHeap, j)) {
			 int leftIndex = left(j);
			 int smallChildIndex = leftIndex; 
			 if (hasRight(maxHeap, j)) {
				 int rightIndex = right(j);
				 if (compareTo(maxHeap.get(leftIndex), maxHeap.get(rightIndex)) < 0) {
					 smallChildIndex = rightIndex;
				 }
			 }
			 if (compareTo(maxHeap.get(smallChildIndex), maxHeap.get(j)) <= 0) {
				 break; 
			 }
			 swap(maxHeap, j, smallChildIndex);
			 j = smallChildIndex;
		 }
	}
	 
	 protected void upheapMin(int j) {
			while (j > 0) {
				int p = parent(j); 
				if (compareTo(minHeap.get(j), minHeap.get(p)) >= 0) {
					 break; 
			 	}
				swap(minHeap, j, p);
				j = p;
			}
		}
	 
	 protected void downheapMin(int j) {
		 while (hasLeft(minHeap, j)) {
			 int leftIndex = left(j);
			 int smallChildIndex = leftIndex; 
			 if (hasRight(minHeap, j)) {
				 int rightIndex = right(j);
				 if (compareTo(minHeap.get(leftIndex), minHeap.get(rightIndex)) > 0) {
					 smallChildIndex = rightIndex;
				 }
			 }
			 if (compareTo(minHeap.get(smallChildIndex), minHeap.get(j)) >= 0) {
				 break; 
			 }
			 swap(minHeap, j, smallChildIndex);
			 j = smallChildIndex;
		 }
	}
    
    protected E removeFromHeap(ArrayList<E> heap) {
    	E answer = heap.get(0);
	swap(heap, 0, heap.size() - 1);
	heap.remove(heap.size() - 1);
	if (heap == maxHeap) {
		downheapMax(0);
	}
	else if (heap == minHeap) {
		downheapMin(0);
	}
	return answer;
    }
    
    public boolean isEmpty() {
    	return maxHeap.size() == 0 && minHeap.size() == 0 ;
    }
    
    public void insert(E n){
        if (isEmpty()){
        	minHeap.add(n);
        }
        else {
            if (compareTo(n, getMed()) <= 0){
            	maxHeap.add(n);
            	upheapMax(maxHeap.size()-1);
            }
            else {
            	minHeap.add(n);
            	upheapMin(minHeap.size()-1);
            }
        }
        balanceHeaps();
    }

    
    protected void balanceHeaps(){
    	if (minHeap.size() - maxHeap.size() > 1) {
    		E answer = removeFromHeap(minHeap);
        	maxHeap.add(answer);
        	upheapMax(maxHeap.size()-1);
        }
        else if (maxHeap.size() - minHeap.size() > 1){
   		E answer = removeFromHeap(maxHeap);
        	minHeap.add(answer);
        	upheapMin(minHeap.size()-1);
        }
    }
    
    public E getMed(){
    	if (isEmpty()) {
    		return null;
    	}
    	else if (maxHeap.size() >= minHeap.size()) {
        	return maxHeap.get(0);
        }
        else { 
        	return minHeap.get(0);
        }
    }
    
    public E removeMed() {
    	E answer = null;
    	if (isEmpty()) {
    		return null;
    	}
    	if (!maxHeap.isEmpty() && getMed() == maxHeap.get(0)) {
    		answer = removeFromHeap(maxHeap);
        }
        else if (!minHeap.isEmpty() && getMed() == minHeap.get(0)){
        	answer = removeFromHeap(minHeap);
        }
    	balanceHeaps();
    	return answer;
    }


	public static void main(String[] args) {
		
		final int LENGTH = 10;
				//(int) (10 * Math.random());
		
		Problem4<Integer> p = new Problem4<Integer>(LENGTH);
		
		for (int i = 0; i < LENGTH; i++) {
			//int number = (int) (i * 10 * Math.random());
			//System.out.println(number);
			//p.insert(number);
		}
		
		//p.insert(0);
		//p.insert(4);
		//p.insert(19);
		//p.insert(27);
		
		//p.insert(2);
		//p.insert(9);
		//p.insert(1);
		//p.insert(11);
		//p.insert(27);
		
		p.insert(17);
		p.insert(-4);
		p.insert(13);
		p.insert(-7);
		p.insert(13);
		p.insert(15);
		p.insert(5);
		p.insert(2);
		
		//p.insert(4);
		//p.insert(9);
		//p.insert(1);
		
		//p.insert(9);
		//p.insert(3);
		//p.insert(3);
		//-7 -4 2 5 13 13 15 17
		// 0 0 2 11 22 36
		//17, -4, 13, -7, 13, 15, 5, 2
		//0 2 8 18 23 35 40
		//0 2 8 11 17 24
		//0 3 5 6 16 41 44 45 51 55
		
		System.out.println("\n-----------------------\n");
		System.out.println("Median is: " + p.getMed() );
		System.out.println("Removed Median is: " + p.removeMed() );
		System.out.println("Median is: " + p.getMed() );
		System.out.println("Removed Median is: " + p.removeMed() );
		System.out.println("Median is: " + p.getMed() );
		System.out.println("Removed Median is: " + p.removeMed() );
		System.out.println("Median is: " + p.getMed() );
		System.out.println("Removed Median is: " + p.removeMed() );
		System.out.println("Median is: " + p.getMed() );
		System.out.println("Removed Median is: " + p.removeMed() );
		System.out.println("Median is: " + p.getMed() );
		System.out.println("Removed Median is: " + p.removeMed() );
		System.out.println("Median is: " + p.getMed() );
		System.out.println("Removed Median is: " + p.removeMed() );
		System.out.println("Median is: " + p.getMed() );
		System.out.println("Removed Median is: " + p.removeMed() );
		System.out.println("Median is: " + p.getMed() );
		System.out.println("Removed Median is: " + p.removeMed() );
		

	}

}
