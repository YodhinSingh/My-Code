import java.util.ArrayList;
import java.util.List;

/*
 * Requirement: You are required to implement all methods recursively. You
 * receive a zero if there is any occurrence of a loop (e.g., for, while).
 */

public class RecursiveMethods {
	/**
	 * Return an array storing the first n numbers in a Fibonacci sequence. The
	 * Fibonacci starts with the first two numbers being 1 and 1, then starting from
	 * the 3rd number, it is the sum of the previous two numbers. You can assume
	 * that n is positive. e.g., fibArray(5) returns an array {1, 1, 2, 3, 5}.
	 * 
	 * @param n the first n Fibonacci numbers
	 * @return an array representing the first n Fibonacci numbers
	 * 
	 *         You are forbidden to use the fibList method below to solve this
	 *         problem.
	 * 
	 *         Requirement: You are required to implement all methods recursively.
	 *         You receive a zero if there is any occurrence of a loop (e.g., for,
	 *         while).
	 */
	public int[] fibArray(int n) {
		/* Your Task. */
		int[] fib = new int[n];
		if (n == 2) {
			fib[0] = 1;
			fib[1] = 1;
			return fib;
		} else {
			fib[0] = 1;
			fib[1] = 1;
			fibArrayHelper(2, fib);
			return fib;
		}
	}

	private void fibArrayHelper(int n, int[] a) {
		if (n == 2) {
			a[n] = 2;
			fibArrayHelper(n + 1, a);
		} else if (n < a.length) {
			a[n] = a[n - 1] + a[n - 2];
			fibArrayHelper(n + 1, a);
		}

	}

	/**
	 * Return a list storing the first n numbers in a Fibonacci sequence. The
	 * Fibonacci starts with the first two numbers being 1 and 1, then starting from
	 * the 3rd number, it is the sum of the previous two numbers. You can assume
	 * that n is positive. e.g., fibList(5) returns a list {1, 1, 2, 3, 5}.
	 * 
	 * @param n the first n Fibonacci numbers
	 * @return a list representing the first n Fibonacci numbers
	 * 
	 *         You are forbidden to use the fibArray method above to solve this
	 *         problem.
	 * 
	 *         Requirement: You are required to implement all methods recursively.
	 *         You receive a zero if there is any occurrence of a loop (e.g., for,
	 *         while).
	 */
	public List<Integer> fibList(int n) {
		/* Your Task. */
		List<Integer> fib = new ArrayList<Integer>();
		if (n == 2) {
			fib.add(1);
			fib.add(1);
			return fib;
		} else {
			fib.add(1);
			fib.add(1);
			fibListHelper(2, fib, n);
			return fib;
		}
	}

	private void fibListHelper(int n, List<Integer> a, int size) {
		if (n == 2) {
			a.add(n, 2);
			fibListHelper(n + 1, a, size);
		} else if (n < size) {
			a.add(n, a.get(n - 1) + a.get(n - 2));
			fibListHelper(n + 1, a, size);
		}
	}

	/**
	 * Return whether or not an array represents the first n numbers in a Fibonacci
	 * sequence. The Fibonacci starts with the first two numbers being 1 and 1, then
	 * starting from the 3rd number, it is the sum of the previous two numbers. The
	 * array may or may not be empty. e.g., isFibArray({1, 2}) returns false and
	 * isFibArray({1, 1, 2, 3, 5, 8}) returns true.
	 * 
	 * @param a an array
	 * @return true if input array a (of length n) represents the first n Fibonacci
	 *         numbers; false otherwise.
	 * 
	 *         You are forbidden to use the isFibList method below to solve this
	 *         problem.
	 * 
	 *         Requirement: You are required to implement all methods recursively.
	 *         You receive a zero if there is any occurrence of a loop (e.g., for,
	 *         while).
	 */
	public boolean isFibArray(int[] a) {
		/* Your Task. */
		if (a.length == 1) {
			return a[0] == 1;
		} else if (a.length == 2) {
			return a[0] == 1 && a[1] == 1;
		} else {
			return a[2] == 2 && isFibArrayHelper(3, a);
		}
	}

	private boolean isFibArrayHelper(int n, int[] a) {
		int[] fibCheck = fibArray(a.length);
		if (n < a.length) {
			return a[n] == fibCheck[n] && isFibArrayHelper(n + 1, a);
		} else {
			return true;
		}
	}

	/**
	 * Return whether or not a list represents the first n numbers in a Fibonacci
	 * sequence. The Fibonacci starts with the first two numbers being 1 and 1, then
	 * starting from the 3rd number, it is the sum of the previous two numbers. The
	 * array may or may not be empty. e.g., isFibList({1, 2}) returns false and
	 * isFibList({1, 1, 2, 3, 5, 8}) returns true.
	 * 
	 * @param a an array
	 * @return true if input list a (of length n) represents the first n Fibonacci
	 *         numbers; false otherwise.
	 * 
	 *         You are forbidden to use the isFibArray method above to solve this
	 *         problem.
	 * 
	 *         Requirement: You are required to implement all methods recursively.
	 *         You receive a zero if there is any occurrence of a loop (e.g., for,
	 *         while).
	 */
	public boolean isFibList(List<Integer> list) {
		/* Your Task. */
		if (list.size() == 1) {
			return list.get(0) == 1;
		} else if (list.size() == 2) {
			return list.get(0) == 1 && list.get(1) == 1;
		} else {
			return list.get(2) == 2 && isFibListHelper(3, list);
		}
	}

	private boolean isFibListHelper(int n, List<Integer> l) {
		int[] fibCheck = fibArray(l.size());
		if (n < l.size()) {
			return l.get(n) == fibCheck[n] && isFibListHelper(n + 1, l);
		} else {
			return true;
		}
	}

	/**
	 * Given a sorted input array a, return a sorted array of size a.length + 1,
	 * consisting of all elements of array a and integer i.
	 * 
	 * @param a an array that is sorted in a non-descending order
	 * @param i an integer
	 * @return a sorted array of size a.length + 1, consisting of all elements of
	 *         array a and integer i. e.g., insertIntoSortedArray({1, 2, 4, 5}, 3)
	 *         returns a sorted array {1, 2, 3, 4, 5}.
	 * 
	 *         You are forbidden to use the insertIntoSortedList method below to
	 *         solve this problem.
	 * 
	 *         Requirement: You are required to implement all methods recursively.
	 *         You receive a zero if there is any occurrence of a loop (e.g., for,
	 *         while).
	 */
	public int[] insertIntoSortedArray(int[] a, int i) {
		/* Your Task. */
		int[] sorted = new int[a.length + 1];

		if (a.length == 0) {
			sorted[0] = i;
		} else {
			InsertSortedArrayHelper(a, sorted, 0, a.length - 1, i, true);
		}

		return sorted;
	}

	private void InsertSortedArrayHelper(int[] a, int[] sorted, int from, int to, int i, boolean notDone) {
		if (from > to && !notDone) {
			sorted[from] = a[from - 1];
		} else if (from > to && notDone) {
			sorted[from] = i;
		} else {
			if (a[from] < i && notDone) {
				sorted[from] = a[from];
				InsertSortedArrayHelper(a, sorted, from + 1, to, i, notDone);
			} else if (a[from] >= i && notDone) {
				sorted[from] = i;
				notDone = false;
				InsertSortedArrayHelper(a, sorted, from + 1, to, i, notDone);
			} else {
				sorted[from] = a[from - 1];
				InsertSortedArrayHelper(a, sorted, from + 1, to, i, notDone);
			}
		}
	}

	/**
	 * Given a sorted input list, return a sorted list of size list.size() + 1,
	 * consisting of all elements of the input list and integer i.
	 * 
	 * @param list a list that is sorted in a non-descending order
	 * @param i    an integer
	 * @return a sorted list of size list.size() + 1, consisting of all elements of
	 *         the input list and integer i. e.g., insertIntoSortedList({1, 2, 4,
	 *         5}, 3) returns a sorted list {1, 2, 3, 4, 5}.
	 * 
	 *         You are forbidden to use the insertIntoSortedArray method above to
	 *         solve this problem.
	 * 
	 *         Requirement: You are required to implement all methods recursively.
	 *         You receive a zero if there is any occurrence of a loop (e.g., for,
	 *         while).
	 */
	public List<Integer> insertIntoSortedList(List<Integer> list, int i) {
		/* Your Task. */
		if (list.isEmpty()) {
			list.add(i);
		} else {
			InsertSortedListHelper(list, 0, i);
		}

		return list;
	}

	private void InsertSortedListHelper(List<Integer> l, int from, int i) {
		if (from == l.size()) {
			l.add(from, i);
		} else if (from < l.size()) {
			if (l.get(from) >= i) {
				l.add(from, i);
			} else {
				InsertSortedListHelper(l, from + 1, i);
			}
		}
	}

	/**
	 * Given two sorted arrays left and right, return a sorted array of size
	 * left.length + right.length, consisting of all elements of arrays left and
	 * right.
	 * 
	 * @param left  a sorted array
	 * @param right a sorted array
	 * @return a sorted array of size left.length + right.length, consisting of all
	 *         elements of arrays left and right. e.g., mergeSortedArrays({1, 3, 5,
	 *         7}, {2, 4, 6, 8}) returns a sorted array {1, 2, 3, 4, 5, 6, 7, 8}.
	 * 
	 *         You are forbidden to use the mergeSortedLists method below to solve
	 *         this problem.
	 * 
	 *         Requirement: You are required to implement all methods recursively.
	 *         You receive a zero if there is any occurrence of a loop (e.g., for,
	 *         while).
	 */
	public int[] mergeSortedArrays(int[] left, int[] right) {
		/* Your Task. */
		if (left.length == 0) {
			return right;
		} else if (right.length == 0) {
			return left;
		} else if (left.length == 0 && right.length == 0) {
			int[] newList = {};
			return newList;
		} else {
			int[] newList = mergeSortedArraysHelper(left, 0, right.length - 1, right);
			return newList;
		}
	}

	private int[] mergeSortedArraysHelper(int[] a, int from, int to, int[] a2) {
		if (from == to) {
			int[] temp = insertIntoSortedArray(a, a2[from]);
			return temp;
		} else {
			int[] temp = insertIntoSortedArray(a, a2[from]);
			int[] list = mergeSortedArraysHelper(temp, from + 1, to, a2);
			return list;
		}

	}

	/**
	 * Given two sorted lists left and right, return a sorted list of size
	 * left.size() + right.size(), consisting of all elements of lists left and
	 * right.
	 * 
	 * @param left  a sorted list
	 * @param right a sorted list
	 * @return a sorted list of size left.size() + right.size(), consisting of all
	 *         elements of lists left and right. e.g., mergeSortedLists({1, 3, 5,
	 *         7}, {2, 4, 6, 8}) returns a sorted list {1, 2, 3, 4, 5, 6, 7, 8}.
	 * 
	 *         You are forbidden to use the mergeSortedArrays method above to solve
	 *         this problem.
	 * 
	 *         Requirement: You are required to implement all methods recursively.
	 *         You receive a zero if there is any occurrence of a loop (e.g., for,
	 *         while).
	 */
	public List<Integer> mergeSortedLists(List<Integer> left, List<Integer> right) {
		if (left.isEmpty()) {
			return right;
		} else if (right.isEmpty()) {
			return left;
		} else if (left.isEmpty() && right.isEmpty()) {
			List<Integer> newList = new ArrayList<Integer>();
			return newList;
		} else {
			List<Integer> newList = mergeSortedListsHelper(left, 0, right);
			return newList;
		}
	}

	private List<Integer> mergeSortedListsHelper(List<Integer> l, int from, List<Integer> l2) {
		if (from == l2.size() - 1) {
			List<Integer> temp = insertIntoSortedList(l, l2.get(from));
			return temp;
		} else {
			List<Integer> temp = insertIntoSortedList(l, l2.get(from));
			List<Integer> list = mergeSortedListsHelper(temp, from + 1, l2);
			return list;
		}
	}

}
